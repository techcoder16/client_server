// Between two sets hackrank 

function isFactorOf(number,value)
{
    return number % value == 0
}
function getTotalX(a, b) {
    let i = Math.max(...a)
    let aMax = Math.max(...a);
    let bMin = Math.min(...b);
    
    const factors = [];
    while(i  >= aMax && i <= bMin)
    {
 
a.every((element)=> isFactorOf(i,element)) == true ? 
b.every((element)=> isFactorOf(element,i)) == true ? factors.push(i):console.log("not") :console.log("not");
i++;        
        
    }
return factors.length}
// Another optimal solution get lcm of first array and gcd of second array which are lcm of first array

// Breaking Records

function breakingRecords(scores) {
    // Write your code here

    let lowest_scores_time = 0;
    let hightest_scores_time = 0;
    let current_element_lowest = scores[0];
    let current_element = scores[0];
    
    scores.map((ele)=>{
       if (ele == current_element)
       {           current_element = ele

       }
       
       else if (ele < current_element_lowest)
       {
           lowest_scores_time ++;
            current_element_lowest = ele
            

       }
       else if (ele > current_element)
       {
           hightest_scores_time ++;
           current_element = ele
           
            
           
       }
       
       
       
        
    });
    
    
    return [hightest_scores_time,lowest_scores_time]

}

// The Birthday Bar

function birthday(s, d, m) {
    
         
         const result = [];
    for (let i = 0; i < s.length - m+ 1; i++) {
          const data = s.slice(i, i + m);
           
data.reduce((sum, a) => sum + a, 0) == d ? result.push(data) : ""
               }
           
     
            
          
            return result.length

}



// Divisible sum pairs
function divisibleSumPairs(n, k, ar) {
    // Write your code here
    let count = 0 
ar.map((a, i) => ar.slice(i + 1).map(b => (a+b)%k == 0 ? count++  : a+b) ) ;


return count;

}



// Migratory Birds

function migratoryBirds(arr) {
    // Write your code here
    const birds = {}
   
    
   arr.map((element) => birds[element] = birds[element] ? birds[element] + 1 : 1);
   
   let max = 0
   let maxKey = 0
   
   for (const bird in birds)
   {
  
       if (max < birds[bird])
       {
           max = birds[bird];
           maxKey = bird;
       }
   }
   
  
return maxKey;   
   
}

// Sock Merchant
function sockMerchant(n, ar) {
    // Write your code here
    let socks = {}
    let count = 0;
for (let i =0 ;i<n ;i++)
{
   
socks[parseInt(ar[i])] = (socks[ar[i]] ? socks[ar[i]]+1 : 1);
 (socks[ar[i]] % 2 === 0) ?  count++:0;
 
 
}


// Page Count

function pageCount(n, p) {
 
    const pageTurns = Math.floor(p / 2);
    const totalTurns = Math.floor(n / 2);

    return Math.min(pageTurns, totalTurns - pageTurns);
    
        
}

//this one is week so try again some time





// // Electronics shop
/*
def getMoneySpent(keyboards, drives, b):
    if min(keyboards) + min(drives) > b:
        return -1
    
    leftover = [b-i for i in keyboards]
    leftover.sort()
    drives.sort()
    
    idx1, idx2 = len(leftover)-1, len(drives)-1
    best = 1000000
    
    while idx1 > -1 and idx2 > -1:
        left, drive = leftover[idx1], drives[idx2]
        x = left - drive
        if x < 0:
            idx2 -= 1
        else:
            best = min(best, x)
            idx1 -= 1
    return b-best

// my solution:

            let max = 0;
            
            keyboards.map((ele) => {
               
               drives.map((newEle)=>{
                   
                  ( (ele  + newEle) > max && (ele+newEle) <= b) ? max = ele + newEle : 0
                           
               }) ;
            });
            
            if (max == 0) {return -1;}
            return max;


*/
// Magic Square


function formingMagicSquare(s) {
 
 const p = 
 [
  [[8, 1, 6],[ 3, 5, 7],[ 4, 9, 2]],
  [[6, 1, 8],[ 7, 5, 3],[ 2, 9, 4]],
  [[8, 3, 4],[ 1, 5, 9], [6, 7, 2]],
  [[4, 3, 8],[ 9, 5, 1], [2, 7, 6]],
  [[6, 7, 2],[ 1, 5, 9], [8, 3, 4]],
  [[2, 7, 6],[ 9, 5, 1], [4, 3, 8]],
  [[4, 9, 2], [3, 5, 7], [8, 1, 6]],
  [[2, 9, 4], [7, 5, 3], [6, 1, 8]]
  ]
  var min = Infinity;
  p.map((ele)=>{
      let cost = 0
     
      for (let i =0;i< ele.length;i++)
      {
          for(let j =0 ;j< ele.length;j++)
          {
          cost += Math.abs(s[i][j] -  ele[i][j])    
              
          }
      }
      if (min > cost)
      {
          min =cost;
      }
      
  });
  
  return min;
 
}

// 2nd solution
function formingMagicSquare(s) {
 
   const cost = [0,0,0,0,0,0,0,0];
    const t = 
    [
        
    
        [4,9,2,3,5,7,8,1,6],
        [4,3,8,9,5,1,2,7,6],
        [2,9,4,7,5,3,6,1,8],
        [2,7,6,9,5,1,4,3,8],
        [8,1,6,3,5,7,4,9,2],
        [8,3,4,1,5,9,6,7,2],
        [6,7,2,1,5,9,8,3,4],
        [6,1,8,7,5,3,2,9,4],
    ];

    for(let i=0;i<8;i++)
    {        
    cost[i] = Math.abs(t[i][0]-s[0][0]) + Math.abs(t[i][1]-s[0][1]) + Math.abs(t[i][2]-s[0][2]);
    cost[i] = cost[i] + Math.abs(t[i][3]-s[1][0]) + Math.abs(t[i][4]-s[1][1]) + Math.abs(t[i][5]-s[1][2]);
    cost[i] = cost[i] + Math.abs(t[i][6]-s[2][0]) + Math.abs(t[i][7]-s[2][1]) + Math.abs(t[i][8]-s[2][2]);
    
    }   
    const min = Math.min(...cost);
    
    
    
    return min;
 
}



// Picking Numbers



function pickingNumbers(a) {
    
    
    const freq = Array(a.length).fill(0)
    a.map((ele) =>{
        
        freq[ele] = freq[ele] ? freq[ele] = freq[ele] + 1:1;
        
        
        
    })
    
 console.log(freq)
 let max = 0;
 freq.reduce((prev,next)=>{
    
     if (prev == undefined )
     {
         prev = 0;
     }
     if (next == undefined )
     {
         next = 0
     }
    max <  prev + next ? max  = prev+next: 0
      
     return next
     
 },freq[0])

console.log(max)
return max
}




// Climbing Ladder

function climbingLeaderboard(ranked, player) {
    // Write your code here
    
    let count =1
    const ranking = []
    ranked.reduce((prev,next)=>{
        
      (next == prev)
    ? ranking.push(count)
    : (count++,ranking.push(count));
        
        
        
        return next
    },ranked[0])

const res = []
    player.map((ele,index)=>{
            let i = 0;
            for( i=0;i<ranked.length;i++)
            {   
                if(ranked[i] <= ele)
                {
                    break;
                }
            }
            
        if (ranking[i])
        {
            res.push(ranking[i])
        }
        else{
            ranking[i] = ranking[ranking.length-1] +1
                       res.push(ranking[i])
        }
        
        
    });
        
        return res;


}




// Designer Pdf viewer
function designerPdfViewer(h, word) {
    // Write your code here
    
    const wordLength = word.length;
        
        let max = 0;

    for (let i =0;i<word.length;i++)
    {
        
h[ parseInt(word.charCodeAt(i)  - 97)] > max?  max = h[ parseInt(word.charCodeAt(i)  - 97)] :0;

    }
    return max  * wordLength;
    



}

// Beautiful days at the movies

function reverse(number)
{
    
    let reminder ,reverse=0;
    while (number >= 1)
    {
              reminder = parseInt(number) % 10;
           
            number = parseInt(number) / 10;
            reverse = (reverse*10)  + reminder;
        
    }
    
    return reverse;
    
    
}
function beautifulDays(i, j, k) {
    // Write your code here


let count =0 ;
    for(let index=i ;index<=j;index++)
    {
        const diff  = Math.abs(index - parseInt(reverse(index)));
        
      
        
        
         (diff %  k == 0)? count = count +1 :0;
       
        
    }
    console.log(count)
    return count;
}

// Save The Prisoner
function saveThePrisoner(n, m, s) {
    // Write your code here
    
     const ans = (s+m-1)%n
    return ans == 0 ? n : ans

        
    
}

// Extra Long Factorials

// void extraLongFactorials(int n) {
//     int fact [1000];
//     int size  = 1 ;
//     fact[0] = 1;
//     int multiplyValue;
//     int carry = 0;
    
//     for (int i=2;i<=n;i++)
//     {
//         for (int j=0;j<size;j++)
//         {       
//                   multiplyValue = i * fact[j] + carry; 
//                    fact[j] = multiplyValue%10;
             
//                    carry = multiplyValue/10;
//         }
//         while(carry)
//         {   
//             fact[size] = carry%10;
            
//             carry = carry/10;
//               size++;
//         }
        
        
//     }
    
//     for(int i = size-1; i >= 0; i--) {
//        cout <<fact[i];
//     }
    
 
// }

// Append and Delete

function appendAndDelete (s, t, k) {
    let o = s.length + t.length
    if (k > o) return 'Yes'
    for (let i = 0, l = Math.min(s.length, t.length); i < l; i++, o -= 2) {
        if (s[i] !== t[i]) break
    }
    return o > k || (k - o) % 2 !== 0 ? 'No' : 'Yes'
}
// Explanation:
// o is the minimum number of operations. But to deal with the one exception in this algorithm, we set it to the total length of both strings first. If the number of allowed operations is bigger than the sum of both strings, the answer will always be "Yes". So we check for that before moving along!
// Now, we compare the letters in both strings and subtract each iteration from the minimum number of operations. Remember that each common letter means 2 less operations (remove a letter + add a letter). We break out of the loop once the letters aren't equal anymore.
// Now, if the minimum number of operations is more than the allowed number, we return "No". Otherwise, as long as the remainder of the difference between minimum and allowed operations is even, we return "Yes".


// Find Squares

function squares(a, b) {
  // Write your code here

  let x = 1;
  let y =1;
  let count = 0;

 
  for (let i = 1 ; i <= b && x<=b;i++)
  {
    if(a ==i)
    {
      if(i*i == a)
      {
        count ++;
      }

    }
    y = 2 *(i) + 1;
    x =x +y;
    if (x >= a && x <= b)
    {
      count++;

    }
    
  }

  
  return count;

}

// Newton-Raphson
/*
#include <iostream>
using namespace std;

float sqrt1(float n) {
    float low = 0.0;
    float high = (float)n+1;
    cout << (high-low) ;
    while ((high-low) > 0.00001) {
        
        float mid = (low+high) / 2;
        cout << low << " " << high << " " <<endl;
        if (mid*mid < n) {
            low = mid;
        }
        else {
            high = mid;
        }
    }
    return low;
}

int main() {
    // Write C++ code here
    cout << sqrt1(49);
  

    return 0;
}
*/


// https://www.hackerrank.com/challenges/sherlock-and-squares/forum


// Cut the sticks
function cutTheSticks(arr) {
    
    
    let answer  = []
     arr = arr.filter(x => x > 0);
     

    let len = arr.length;
    let minVal = Math.min(...arr);
 if (arr.length == 1)
 {
     return 1;
 }
 else if (arr.length < 1 )
 {
     return 0;
 }
 
 
 while (arr.length > 0) {  
     
    minVal = Math.min(...arr);
 
      let counter = 0 ;
    for (let i =0 ; i < arr.length ;i++)
    {
       
            
            arr[i] =  arr[i] - minVal;

        counter = counter +  1;
    
    }
    console.log(counter)
   
     arr = arr.filter(x => x > 0);
    answer.push (counter)
    
    
    
}
    console.log(answer)
 
    return answer;
}



// Non divisible subset

function nonDivisibleSubset(k, s) {
    // Write your code here

s = s.sort((a,b)=>a-b);console.log(s)
s = s.filter((x, index) => s.indexOf(x) === index);

let i=0,j=s.length-1;
let counter = 0;
let remAr = Array(k).fill(0)
for (;i<s.length;i++)
    {
        
        remAr[s[i]%k]++;
        
                
    }
    
  let ans = min(remAr[0], 1);

    if (k % 2 === 0) { 
        ans += min(remAr[k / 2], 1);
    }

    for (let i = 1; i <= Math.floor(k / 2); i++) { 
        if (i !== k - i) { 
            ans += max(remAr[i], remAr[k - i]);
        }
    }
    return ans;
    
    
}


// Repeated String

function repeatedString(s, n) {
    // Write your code here
                let acount = 0;
                for (let i=0;i<s.length;i++)
                {
                    if (s[i] == 'a'){
                        acount = acount + 1;
                    }
                    
                }
                
                
                
                
             const divide = Math.floor(n / s.length);
            let hashAs = divide * acount;
            
            const reminder = n % s.length;
            for (let j =0 ;j < reminder;j++)
            {
                if (s[j] == 'a')
                {
                    hashAs++;
                }
                
            }
            
            
            console.log(hashAs);
            
   return hashAs;
  
  
  
  
    }



// Equality in a array

function equalizeArray(arr) {
    // Write your code here
    
    let freq = Array(arr.length).fill(0);
    
    if (arr.length <= 1)
    {
        return 0;
    }
        
       arr.map((ele)=>{ 
          freq[ele] =   ((freq[ele] > 0) ? (freq[ele] = freq[ele] + 1):1 );
            }) ;
    
    
   freq =  freq.filter((x)=>x>0);
   let max = Math.max(...freq)
   
   let data = 0
  
    return arr.length - max;

}
